"use strict";var ApplicationConfiguration=function(){var applicationModuleName="smportal",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("access-tokens"),ApplicationConfiguration.registerModule("admin"),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("oauth-clients"),ApplicationConfiguration.registerModule("request-tokens"),ApplicationConfiguration.registerModule("users"),angular.module("access-tokens").config(["$stateProvider",function($stateProvider){$stateProvider.state("listAccessTokens",{url:"/access-tokens",templateUrl:"modules/access-tokens/views/list-access-tokens.client.view.html"}).state("createAccessToken",{url:"/access-tokens/create",templateUrl:"modules/access-tokens/views/create-access-token.client.view.html"}).state("viewAccessToken",{url:"/access-tokens/:accessTokenId",templateUrl:"modules/access-tokens/views/view-access-token.client.view.html"}).state("editAccessToken",{url:"/access-tokens/:accessTokenId/edit",templateUrl:"modules/access-tokens/views/edit-access-token.client.view.html"})}]),angular.module("access-tokens").controller("AccessTokensController",["$scope","$stateParams","$location","Authentication","AccessTokens",function($scope,$stateParams,$location,Authentication,AccessTokens){$scope.authentication=Authentication,$scope.create=function(){var accessToken=new AccessTokens({name:this.name});accessToken.$save(function(response){$location.path("access-tokens/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(accessToken){if(accessToken){accessToken.$remove();for(var i in $scope.accessTokens)$scope.accessTokens[i]===accessToken&&$scope.accessTokens.splice(i,1)}else $scope.accessToken.$remove(function(){$location.path("access-tokens")})},$scope.update=function(){var accessToken=$scope.accessToken;accessToken.$update(function(){$location.path("access-tokens/"+accessToken._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.accessTokens=AccessTokens.query()},$scope.findOne=function(){$scope.accessToken=AccessTokens.get({accessTokenId:$stateParams.accessTokenId})}}]),angular.module("admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Admin","admin","dropdown",void 0,!1,["admin"]),Menus.addSubMenuItem("topbar","admin","Oauth clients","admin/oauth-clients"),Menus.addSubMenuItem("topbar","admin","Users","admin/users")}]),angular.module("admin").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin-home",{url:"/admin-home",templateUrl:"/modules/admin/views/home.client.view.html"}).state("listUsers",{url:"/admin/users",templateUrl:"/modules/admin/views/list-users.client.view.html"}).state("showUser",{url:"/admin/user/:userId",templateUrl:"/modules/admin/views/view-user.client.view.html"}).state("admin/listOauthClients",{url:"/admin/oauth-clients",templateUrl:"/modules/admin/views/list-oauth-clients.client.view.html"}).state("admin/showOauthClient/",{url:"/admin/oauth-clients/:oauthClientId",templateUrl:"/modules/admin/views/view-oauth-client.client.view.html"})}]),angular.module("admin").controller("AdminHomeController",["$scope",function($scope){}]),angular.module("admin").controller("AdminUserController",["$scope","$stateParams","$location","Authentication","Userdata",function($scope,$stateParams,$location,Authentication,Userdata){$scope.authentication=Authentication,$scope.update=function(){var oauthClient=$scope.oauthClient;oauthClient.$update(function(){$location.path("admin/users/"+Userdata._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.users=Userdata.query()},$scope.findOne=function(){$scope.user=Userdata.get({userId:$stateParams.userId})}}]),angular.module("admin").controller("AdminOauthClientController",["$scope","$stateParams","$location","Authentication","AdminOauthClients",function($scope,$stateParams,$location,Authentication,AdminOauthClients){$scope.authentication=Authentication,$scope.update=function(){var oauthClient=$scope.oauthClient;oauthClient.$update(function(){$location.path("admin/oauth-clients/"+oauthClient._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.oauthClients=AdminOauthClients.query()},$scope.findOne=function(){$scope.oauthClient=AdminOauthClients.get({oauthClientId:$stateParams.oauthClientId})}}]),angular.module("oauth-clients").factory("AdminOauthClients",["$resource",function($resource){return $resource("/admin/oauth-clients/:oauthClientId",{oauthClientId:"@_id"},{update:{method:"PUT"}})}]),angular.module("admin").factory("Userdata",["$resource",function($resource){return $resource("admin/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]),angular.module("articles").run(["Menus",function(Menus){}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("oauth-clients").run(["Menus",function(Menus){Menus.addMenuItem("topbar","My Oauth clients","oauth-clients","dropdown","/oauth-clients(/create)?"),Menus.addSubMenuItem("topbar","oauth-clients","List Oauth clients","oauth-clients"),Menus.addSubMenuItem("topbar","oauth-clients","New Oauth client","oauth-clients/create")}]),angular.module("oauth-clients").config(["$stateProvider",function($stateProvider){$stateProvider.state("listOauthClients",{url:"/oauth-clients",templateUrl:"modules/oauth-clients/views/list-oauth-clients.client.view.html"}).state("createOauthClient",{url:"/oauth-clients/create",templateUrl:"modules/oauth-clients/views/create-oauth-client.client.view.html"}).state("viewOauthClient",{url:"/oauth-clients/:oauthClientId",templateUrl:"modules/oauth-clients/views/view-oauth-client.client.view.html"}).state("editOauthClient",{url:"/oauth-clients/:oauthClientId/edit",templateUrl:"modules/oauth-clients/views/edit-oauth-client.client.view.html"})}]),angular.module("oauth-clients").controller("OauthClientsController",["$scope","$stateParams","$location","Authentication","OauthClients",function($scope,$stateParams,$location,Authentication,OauthClients){$scope.authentication=Authentication,$scope.create=function(){var oauthClient=new OauthClients({name:this.name,clientKey:this.clientKey,clientSecret:this.clientSecret,allowedDomainURL:this.allowedDomainURL});oauthClient.$save(function(response){$location.path("oauth-clients/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(oauthClient){if(oauthClient){oauthClient.$remove();for(var i in $scope.oauthClients)$scope.oauthClients[i]===oauthClient&&$scope.oauthClients.splice(i,1)}else $scope.oauthClient.$remove(function(){$location.path("oauth-clients")})},$scope.update=function(){var oauthClient=$scope.oauthClient;oauthClient.$update(function(){$location.path("oauth-clients/"+oauthClient._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.oauthClients=OauthClients.query()},$scope.findOne=function(){$scope.oauthClient=OauthClients.get({oauthClientId:$stateParams.oauthClientId})}}]),angular.module("oauth-clients").factory("OauthClients",["$resource",function($resource){return $resource("oauth-clients/:oauthClientId",{oauthClientId:"@_id"},{update:{method:"PUT"}})}]),angular.module("request-tokens").config(["$stateProvider",function($stateProvider){$stateProvider.state("listRequestTokens",{url:"/request-tokens",templateUrl:"modules/request-tokens/views/list-request-tokens.client.view.html"}).state("createRequestToken",{url:"/request-tokens/create",templateUrl:"modules/request-tokens/views/create-request-token.client.view.html"}).state("viewRequestToken",{url:"/request-tokens/:requestTokenId",templateUrl:"modules/request-tokens/views/view-request-token.client.view.html"}).state("editRequestToken",{url:"/request-tokens/:requestTokenId/edit",templateUrl:"modules/request-tokens/views/edit-request-token.client.view.html"})}]),angular.module("request-tokens").controller("RequestTokensController",["$scope","$stateParams","$location","Authentication","RequestTokens",function($scope,$stateParams,$location,Authentication,RequestTokens){$scope.authentication=Authentication,$scope.create=function(){var requestToken=new RequestTokens({name:this.name});requestToken.$save(function(response){$location.path("request-tokens/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(requestToken){if(requestToken){requestToken.$remove();for(var i in $scope.requestTokens)$scope.requestTokens[i]===requestToken&&$scope.requestTokens.splice(i,1)}else $scope.requestToken.$remove(function(){$location.path("request-tokens")})},$scope.update=function(){var requestToken=$scope.requestToken;requestToken.$update(function(){$location.path("request-tokens/"+requestToken._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.requestTokens=RequestTokens.query()},$scope.findOne=function(){$scope.requestToken=RequestTokens.get({requestTokenId:$stateParams.requestTokenId})}}]),angular.module("request-tokens").factory("RequestTokens",["$resource",function($resource){return $resource("request-tokens/:requestTokenId",{requestTokenId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);